/*
  GeometricNet --  Geometric Network Createion Library based on OpenLayers

  Copyright 2010 Gagan Bansal, released under the Clear BSD license.
  Please see http://svn.GeometricNet.org/trunk/GeometricNet/license.txt
  for the full text of the license.

*/

/* Contains portions of OpenLayers:
 *
 * OpenLayers Map Viewer Library
 *  Copyright 2005-2008 MetaCarta, Inc., released under the Clear BSD license.
 *  Please see http://svn.openlayers.org/trunk/openlayers/license.txt
 *  for the full text of the license.
 *
 *--------------------------------------------------------------------------*/
GeometricNet={};GeometricNet.Layer={};GeometricNet.Layer.Vector={};GeometricNet.Layer.Vector.Flag={};GeometricNet.Control={};GeometricNet.Control.DrawFeature={};GeometricNet.Feature={};GeometricNet.Feature.Vector={};GeometricNet.Feature.Vector.Edge={};GeometricNet.Feature.Vector.Node={};GeometricNet.Graph={};GeometricNet.Util={};GeometricNet.VERSION_NUMBER="GeometricNet-alpha-0.3.1 -- $Revision: 88 $";GeometricNet.Control.DrawFeature.DrawEdge=OpenLayers.Class(OpenLayers.Control.DrawFeature,{debug:false,edgeType:null,initialize:function(layer,handler,options){if(options==undefined){options={};}
var newArguments=[];newArguments.push(layer,handler,options);OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,newArguments);if(options.edgeType){this.edgeType=options.edgeType;}},drawFeature:function(geometry){if(this.debug){console.log("DrawEdge.js - drawFeature debug true");}
var attributes={edgeType:this.edgeType};var options={fid:this.layer.createUniqueFid()};var feature=new GeometricNet.Feature.Vector.Edge(geometry,attributes,options);if(this.debug){console.log("drawEdge type: "+this.edgeType);}
var proceed=this.layer.events.triggerEvent("sketchcomplete",{feature:feature});if(proceed!==false){feature.state=OpenLayers.State.INSERT;this.layer.addFeatures([feature]);this.featureAdded(feature);this.events.triggerEvent("featureadded",{feature:feature});}},CLASS_NAME:"GeometricNet.Control.DrawFeature.DrawEdge"});GeometricNet.Control.DrawFeature.DrawNode=OpenLayers.Class(OpenLayers.Control.DrawFeature,{debug:false,nodeType:null,initialize:function(layer,handler,options){if(options==undefined){options={};}
var newArguments=[];newArguments.push(layer,handler,options);OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,newArguments);if(options.nodeType){this.nodeType=options.nodeType;}},drawFeature:function(geometry){if(this.debug){console.log("DrawNode.js - drawFeature debug true");}
var attributes={nodeType:this.nodeType};var options={fid:this.layer.createUniqueFid()};var feature=new GeometricNet.Feature.Vector.Node(geometry,attributes,options);var proceed=this.layer.events.triggerEvent("sketchcomplete",{feature:feature});if(proceed!==false){feature.state=OpenLayers.State.INSERT;this.layer.addFeatures([feature]);this.featureAdded(feature);this.events.triggerEvent("featureadded",{feature:feature});}},CLASS_NAME:"GeometricNet.Control.DrawFeature.DrawNode"});GeometricNet.Feature.Vector.Node=OpenLayers.Class(OpenLayers.Feature.Vector,{debug:false,initialize:function(point,attributes,options){options=options?options:{};if(point instanceof OpenLayers.Geometry.Point){attributes=attributes?attributes:{};attributes.startEdges=attributes.startEdges?attributes.startEdges:[];attributes.endEdges=attributes.endEdges?attributes.endEdges:[];var newArguments=[];newArguments.push(point,attributes);OpenLayers.Feature.Vector.prototype.initialize.apply(this,newArguments);this.fid=options.fid?options.fid:null;if(this.debug){console.log("Feature.Vector.Node.js - initialize - node.attributes.startEdges: "+this.fid);}}else{return null;}},getEdgeCount:function(edgeType,direction){var count=0;var edges=[];var edge;if(direction==0){edges=this.attributes.startEdges;}else if(direction==1){edges=this.attributes.endEdges;}else{return"msg";}
for(var i=0;i<edges.length;i++){edge=this.layer.edge.getFeatureByFid(edges[i]);if(edgeType==edge.attributes.edgeType)count++;}
return count;},canSnapToEdge:function(edge,shootingNodeStartEdgeCount,shootingNodeEndEdgeCount){var nodeDetail=edge.layer.network.config.nodeLayer.nodes[this.attributes.nodeType];if(shootingNodeStartEdgeCount==undefined){shootingNodeStartEdgeCount=this.getEdgeCount(edge.attributes.edgeType,0);}
if(shootingNodeEndEdgeCount==undefined){shootingNodeEndEdgeCount=this.getEdgeCount(edge.attributes.edgeType,1);}
if(nodeDetail.startEdges.hasOwnProperty(edge.attributes.edgeType)&&nodeDetail.endEdges.hasOwnProperty(edge.attributes.edgeType))
{if(shootingNodeStartEdgeCount<nodeDetail.startEdges[edge.attributes.edgeType].maxCount&&shootingNodeEndEdgeCount<nodeDetail.endEdges[edge.attributes.edgeType].maxCount)
{return true;}}
return false;},getStartEdges:function(){var edges=[];for(var i=0;i<this.attributes.startEdges.length;i++){edges.push(this.layer.network.edge.getFeatureByFid(this.attributes.startEdges[i]));}
return edges;},getEndEdges:function(){var edges=[];for(var i=0;i<this.attributes.endEdges.length;i++){edges.push(this.layer.network.edge.getFeatureByFid(this.attributes.endEdges[i]));}
return edges;},canNodeSnapToEdge:function(targetEdge,shootingNodeStartEdgesCount,shootingNodeEndEdgesCount){var nodeDetail=this.layer.network.nodesDetail[this.attribute.nodeType];if(nodeDetail.startEdges.hasOwnProperty(targetEdge.attributes.edgeType)&&nodeDetail.endEdges.hasOwnProperty(targetEdge.attributes.edgeType))
{if(shootingNodeStartEdgesCount<nodeDetail.startEdges[edge.attributes.edgeType].maxCount&&shootingNodeEndEdgesCount<nodeDetail.endEdges[edge.attributes.edgeType].maxCount)
{return true;}}
return false;},CLASS_NAME:"GeometricNet.Feature.Vector.Node"});GeometricNet.Feature.Vector.Edge=OpenLayers.Class(OpenLayers.Feature.Vector,{debug:false,initialize:function(lineString,attributes,options){options=options?options:{};if(lineString instanceof OpenLayers.Geometry.LineString){if(attributes==undefined){attributes={};}
var newArguments=[];newArguments.push(lineString,attributes);OpenLayers.Feature.Vector.prototype.initialize.apply(this,newArguments);this.fid=options.fid?options.fid:null;}else{return null;}},CreateFromVector:function(feature){if(feature instanceof OpenLayers.Feature.Vector){return new GeometricNet.Feature.Vector.Edge(feature.geometry,feature.attributes,{fid:feature.fid});}
return null;},splitWith:function(node){var TOLERANCE=this.layer.network.config.tolerance;if(this.debug){console.log("Feature.Vector.Edge.js - distance to node:"+this.geometry.distanceTo(node.geometry));console.log("Feature.Vector.Edge.js - this edge layer tolerance :"+TOLERANCE);console.log("Feature.Vector.Edge.js - this edge layer node  :"+this.layer.node.name);}
if(this.geometry.distanceTo(node.geometry)<TOLERANCE){var result=GeometricNet.Util.LRSMeasure(this.geometry,node.geometry,{details:true,tolerance:TOLERANCE});var geometries=[result.subString1,result.subString2];if(this.debug){console.log("edge  to split : "+this.geometry.toString());console.log("node that will split: "+node.geometry.toString());console.log("result.subString1:"+result.subString1.toString());console.log("result.subString2:"+result.subString2.toString());console.log("geometries[0]: "+geometries[0].toString());console.log("geometries[1]: "+geometries[1].toString());}
if(geometries.length>1){var part1Attributes,part2Attributes;var part1,part2;part1Attributes=OpenLayers.Util.extend({},this.attributes);part1=new GeometricNet.Feature.Vector.Edge(geometries[0],part1Attributes,{fid:this.layer.createUniqueFid()});part1.state=OpenLayers.State.INSERT;part1.attributes.endNode=node.fid;part2Attributes=OpenLayers.Util.extend({},this.attributes);part2=new GeometricNet.Feature.Vector.Edge(geometries[1],part2Attributes,{fid:this.layer.createUniqueFid()});part2.state=OpenLayers.State.INSERT;part2.attributes.startNode=node.fid;if(node.attributes.endEdges==undefined){node.attributes.endEdges=[];}
if(node.attributes.startEdges==undefined){node.attributes.startEdges=[];}
var partStartNode,partEndNode;partStartNode=this.layer.node.getFeatureByFid(this.attributes.startNode)
if(partStartNode){if(partStartNode.attributes.startEdges==undefined){partStartNode.attributes.startEdges=[];}else{OpenLayers.Util.removeItem(partStartNode.attributes.startEdges,this.fid);}
partStartNode.attributes.startEdges.push(part1.fid);}
partEndNode=node;if(partEndNode){partEndNode.attributes.endEdges.push(part1.fid);if(this.debug){console.log("Edje.js - splitEdges - part1.attributes.endNode.attributes.endEdges[0].fid : "
+partEndNode.attributes.endEdges[0].fid);}}
partEndNode=this.layer.node.getFeatureByFid(this.attributes.endNode);if(partEndNode){if(partEndNode.attributes.endEdges==undefined){partEndNode.attributes.endEdges=[];}else{if(this.debug){console.log("Edje.js - splitEdges - part2 endEdges  : "+partEndNode.attributes.endEdges);}
OpenLayers.Util.removeItem(partEndNode.attributes.endEdges,this.fid);}
partEndNode.attributes.endEdges.push(part2.fid);}
partStartNode=node;partStartNode.attributes.startEdges.push(part2.fid);part1.layer=this.layer;part2.layer=this.layer;if(this.debug){console.log("Edje.js - splitEdges - part1 layer: "+part1.layer.name);}
return[part1,part2];}}else{return null;}},snapToNode:function(node,nodeIndex){var vertices=[];vertices=this.geometry.getVertices();if(nodeIndex==0){vertices[0]=node.geometry.clone();var oldStartNode=this.layer.node.getFeatureByFid(this.attributes.startNode);if(oldStartNode){OpenLayers.Util.removeItem(oldStartNode.attributes.startEdges,this.fid);}
this.attributes.startNode=node.fid;node.attributes.startEdges.push(this.fid);}else if(nodeIndex==1){vertices[vertices.length-1]=node.geometry.clone();var oldEndNode=this.layer.node.getFeatureByFid(this.attributes.endNode);if(oldEndNode){OpenLayers.Util.removeItem(oldEndNode.attributes.endEdges,this.fid);}
this.attributes.endNode=node.fid;node.attributes.endEdges.push(this.fid);}else{return"msg";}
this.geometry.destroy();this.geometry=new OpenLayers.Geometry.LineString(vertices);if(this.state==undefined){this.state=OpenLayers.State.UPDATE;}},canSnapToNode:function(targetNode,nodeIndex){var targetNodeDetail=this.layer.network.config.nodeLayer.nodes[targetNode.attributes.nodeType];var edgeTypeCount;if(nodeIndex==0){if(targetNodeDetail.startEdges.hasOwnProperty(this.attributes.edgeType)){if(targetNode.getEdgeCount(this.attributes.edgeType,0)<targetNodeDetail.startEdges[this.attributes.edgeType].maxCount){return true;}}}else if(nodeIndex==1){if(targetNodeDetail.endEdges.hasOwnProperty(this.attributes.edgeType)){if(targetNode.getEdgeCount(this.attributes.edgeType,1)<targetNodeDetail.endEdges[this.attributes.edgeType].maxCount){return true;}}}else{return"msg";}
return false;},canSnapToEdge:function(targetEdge,nodeIndex){},splitWithNodes:function(shootingNodes){var splittedEdges=[this];var splitPair=[];if(shootingNodes.length==1){return this.splitWith(shootingNodes[0]);}else if(shootingNodes.length>1){var sortedNodes=[];var nodes=[];var measure;for(var i=0;i<shootingNodes.length;i++){measure=GeometricNet.Util.LRSMeasure(this.geometry,shootingNodes[i].geometry,{tolerance:this.layer.network.config.tolerance});nodes.push([shootingNodes[i],measure]);}
sortedNodes=GeometricNet.Util.multiSort(nodes,1);for(var i=0;i<sortedNodes.length;i++){if(this.debug){console.log(" - splitWithNodes - "+splittedEdges[splittedEdges.length-1].geometry.toString());console.log(" - splitWithNodes - "+sortedNodes[0][1].geometry.toString());}
splitePair=splittedEdges[splittedEdges.length-1].splitWith(sortedNodes[i][1]);splittedEdges.splice(splittedEdges.length-1,1);splittedEdges.push(splitePair[0],splitePair[1]);}
return splittedEdges;}else{return false;}},getLayer:function(){return this.layer;},CLASS_NAME:"GeometricNet.Feature.Vector.Edge"});GeometricNet.Layer.Vector.Node=OpenLayers.Class(OpenLayers.Layer.Vector,{network:null,debug:false,edge:null,maxFid:"0",lastFid:"0",lastId:0,initialize:function(name,options){if(options==undefined){options={};}
this.network=options.network?options.network:null;OpenLayers.Util.extend(options,{'reportError':false});var newArguments=[];newArguments.push(name,options);OpenLayers.Layer.Vector.prototype.initialize.apply(this,newArguments);if(options.edge!=undefined){this.edge=options.edge;}
this.events.register("sketchcomplete",this,this.onSketchComplete);this.events.register("beforefeaturesadded",this,this.onBeforeFeaturesAdded);this.events.register("vertexmodified",this,this.onVertexModified);},createUniqueFid:function(){this.lastId=this.lastId+1;var fid="node_"+this.network.uidPrefix+"_"+this.lastId;return fid;},onBeforeFeaturesAdded:function(event){var node;for(var i=0;i<event.features.length;i++){feature=event.features[i];if(!(feature instanceof GeometricNet.Feature.Vector.Node)){if(feature instanceof OpenLayers.Feature.Vector){node=new GeometricNet.Feature.Vector.Node(feature.geometry,feature.attributes,{fid:feature.fid});event.features[i]=node;}else{event.features[i]=null;}}}},getFeaturesIntersected:function(geom){var newGeom;var intersected=[];if(geom instanceof OpenLayers.Geometry.Point){if(this.network.config.isTopology){newGeom=this.buffer(geom,this.network.config.tolerance);}else{newGeom=geom;}}else if(geom instanceof OpenLayers.Geometry.Polygon){newGeom=geom;}else{}
for(var i=0;i<this.features.length;i++){if(newGeom.intersects(this.features[i].geometry)){intersected.push(this.features[i]);}}
return intersected;},setEdge:function(edge){this.edge=edge;},onVertexModified:function(event){this.onNodeMove(event.feature);},onFeatureModified:function(event){this.onNodeMove(event.feature);},onSketchComplete:function(event){if(this.debug){console.log("Node.js - onSketchComplete - event triggered and geom:"+event.feature.geometry);console.log("Node.js - onSketchComplete - node.fid:"+event.feature.fid);}
if(!this.network.config.isTopology){return true;}else{return this.considerToAdd(event.feature);}},considerToAdd:function(node,options){if(this.debug){console.log("Layer.Node.js - considerToAdd - started");}
var result=true;var nodeSnap=this.considerSnap(node,{details:true});if(nodeSnap){result=false;}else{if(this.debug){console.log("Layer.Node.js - considerToAdd - considering for edge snap");}
if(this.edge.isOnEdge(node)){if(this.debug){console.log("node is on edge so sending to edge.considerSnap");}
result=this.edge.considerSnap(node);}else{if(this.debug){console.log("node is not on edge");}}}
return result;},considerSnap:function(node,options){var intersectedNodes=this.getFeaturesIntersected(node.geometry);var result;if(intersectedNodes.length>0){if(options!=undefined){if(options.details==true){result=intersectedNodes;}}else{result=true;}}else{result=false;}
return result;},onEventSnap:function(event){if(this.debug){console.log("Node.js - onEventSnap - event triggered and event:"+event);}},onEventBeforeFeatureAdded:function(event){if(this.debug){console.log("Node.js - onEventBeforeFeatureAdded - node.fid:"+event.feature.fid);}
return true;},onEventFeatureAdded:function(event){if(this.debug){console.log("Node.js - onEventFeatureAdded - node.fid:"+event.feature.fid);}},buffer:function(geom,distance){var bound,newGeom;if(geom instanceof OpenLayers.Geometry.Point){var x,y,left,bottom,right,top;left=geom.x-distance;bottom=geom.y-distance;right=geom.x+distance;top=geom.y+distance;bound=new OpenLayers.Bounds(left,bottom,right,top);newGeom=bound.toGeometry();}else{}
return newGeom;},findNearestNode:function(point,distance){var searchBox=this.buffer(point,distance);if(this.debug){console.log("Layer.Node.js - findNearestNode - searchbox: "+searchBox.toString());}
var nodes=this.getFeaturesIntersected(searchBox);var leastDist=Number.POSITIVE_INFINITY;var dist,nearest;if(nodes){if(this.debug){console.log("Layer.Node.js - findNearestNode - near nodes number : "+nodes.length);}
for(var i=0;i<nodes.length;i++){dist=point.distanceTo(nodes[i].geometry);if(dist<leastDist){leastDist=dist;nearest=nodes[i];}}
if(this.debug){console.log("Layer.Node.js - findNearestNode - nearest Node : "+nearest.fid);}
return nearest;}else{return false;}},removeNode:function(node){if(this.network.config.isTopology){connectedEdges=node.attributes.startEdges;connectedEdges=connectedEdges.concat(node.attributes.endEdges);for(var i=0;i<connectedEdges.length;i++){edge=this.edge.getFeatureByFid(connectedEdges[i]);this.edge.removeEdge(edge);}}
this.removeFeatures([node]);},onNodeMove:function(node){var startEdges=node.getStartEdges();var endEdges=node.getEndEdges();this.network.edge.eraseFeatures(endEdges);this.network.edge.eraseFeatures(startEdges);for(var i=0;i<startEdges.length;i++){startEdges[i].snapToNode(node,0);this.network.edge.drawFeature(startEdges[i]);}
for(var i=0;i<endEdges.length;i++){endEdges[i].snapToNode(node,1);this.network.edge.drawFeature(endEdges[i]);}this.network.edge.redraw();},CLASS_NAME:"GeometricNet.Layer.Vector.Node"});GeometricNet.Layer.Vector.Edge=OpenLayers.Class(OpenLayers.Layer.Vector,{network:null,node:false,debug:false,maxFid:"0",lastFid:"0",lastId:0,initialize:function(name,node,options){if(options==undefined){options={};}
OpenLayers.Util.extend(options,{'reportError':false});var newArguments=[];newArguments.push(name,options);OpenLayers.Layer.Vector.prototype.initialize.apply(this,newArguments);this.node=node;this.node.edge=this;this.events.register("sketchcomplete",this,this.onSketchComplete);this.events.register("beforefeaturesadded",this,this.onBeforeFeaturesAdded);},createUniqueFid:function(){this.lastId=this.lastId+1;var fid="edge_"+this.network.uidPrefix+"_"+this.lastId;return fid;},onSketchComplete:function(event){return this.considerToAdd(event.feature);},onBeforeFeatureAdded:function(event){console.log("triggered event 'beforefeatureadded' on edge layer");if(!(event.feature instanceof GeometricNet.Feature.Vector.Edge)){console.log("adopt this");if(event.feature instanceof OpenLayers.Feature.Vector){console.log("adopting this");event.feature=new GeometricNet.Feature.Vector.Edge(event.feature.geometry,event.feature.attributes,{fid:event.feature.fid});console.log("event.feature.fid: "+event.feature.fid);event.feature.fid=1000;console.log("changed event.feature.fid: "+event.feature.fid);return true;}else{return false;}}},onBeforeFeaturesAdded:function(event){var edge;for(var i=0;i<event.features.length;i++){feature=event.features[i];if(!(feature instanceof GeometricNet.Feature.Vector.Edge)){if(feature instanceof OpenLayers.Feature.Vector){edge=new GeometricNet.Feature.Vector.Edge(feature.geometry,feature.attributes,{fid:feature.fid});event.features[i]=edge;}else{event.features[i]=null;}}}},getFeaturesIntersected:function(geom){var intersected=[];var newGeom;if(geom instanceof OpenLayers.Geometry.Point){if(this.network.config.isTopology){newGeom=this.node.buffer(geom,this.network.config.tolerance);}else{newGeom=geom;}
for(var i=0;i<this.features.length;i++){if(newGeom.intersects(this.features[i].geometry)){intersected.push(this.features[i]);}}}else if(geom instanceof OpenLayers.Geometry.LineString){for(var i=0;i<this.features.length;i++){if(this.features[i].geometry.intersects(geom)){intersected.push(this.features[i]);}}}else{}
return intersected;},considerSnap:function(node){if(this.debug){console.log("considering snapping with edge");}
var intersectedEdges=this.getFeaturesIntersected(node.geometry);if(this.debug){console.log("Layer.Edge.js - considerSnap() - intersectedEdges: "+intersectedEdges.length);}
if(intersectedEdges.length>0){var edgesSplit=[];var edgesDeleted=[];for(var i=0;i<intersectedEdges.length;i++){if(this.debug){console.log("Layer.Edge.js - considerSnap() - splitting the intersected edge id:"+intersectedEdges[i].fid);}
if(node.canSnapToEdge(intersectedEdges[i])){edgesSplit=intersectedEdges[i].splitWith(node);this.addFeatures(edgesSplit);edgesDeleted.push(intersectedEdges[i]);}else{return false;}}
this.removeFeatures(edgesDeleted);return true;}else{return false;}},considerToAdd:function(edge){edge.layer=this;if(!this.createEndNodes(edge)){return false;}
if(this.network.config.isSplitWithEdge){var intersections=[];var newNodes=[];var intersectedOnNetwork=this.getIntersectedFromNetwork(edge.geometry);if(this.debug){console.log("Layer.Edge.js - getIntersectedFromNetwork()- edges intersected with the edge under consideration: "+intersectedOnNetwork.edges.length);}
if(this.debug&&intersectedOnNetwork.edges.length>0){}
for(var i=0;i<intersectedOnNetwork.edges.length;i++){for(var j=0;j<intersectedOnNetwork.edges[i].intersections.length;j++){var node=new GeometricNet.Feature.Vector.Node(intersectedOnNetwork.edges[i].intersections[j],{fid:this.node.createUniqueFid()});node.state=OpenLayers.State.INSERT;if(this.node.considerToAdd(node)){newNodes.push(node);}}}
this.node.addFeatures(newNodes);if(this.debug){console.log("Layer.Edge.js - getIntersectedFromNetwork()- total intersected existing nodes : "+intersectedOnNetwork.nodes.length);}
OpenLayers.Util.removeItem(intersectedOnNetwork.nodes,this.node.getFeatureByFid(edge.attributes.startNode));OpenLayers.Util.removeItem(intersectedOnNetwork.nodes,this.node.getFeatureByFid(edge.attributes.endNode));if(this.debug){console.log("Layer.Edge.js - getIntersectedFromNetwork()- total intersected existing nodes, after removing end nodes or this edge : "+intersectedOnNetwork.nodes.length);}
var newNodesOnEdge=newNodes.concat(intersectedOnNetwork.nodes);if(newNodesOnEdge.length>0){splittedEdges=edge.splitWithNodes(newNodesOnEdge);this.addFeatures(splittedEdges);return false;}else{return true;}}else{return true;}},getIntersectedFromNetwork:function(geom){var result={};result.edges=[];result.nodes=[];if(geom instanceof OpenLayers.Geometry.LineString){var intersectedEdges=[];var nodesIntersectedOnEdge=[];var intersections=[];intersectedEdges=this.getFeaturesIntersected(geom);if(this.debug){console.log("Layer.Edge.js - considerToAdd() - other edges intersected: "
+intersectedEdges.length)};for(var i=0;i<intersectedEdges.length;i++){var nodesFound=[];var edgeDetail={};edgeDetail.intersections=[];var isEdgeToBeAdded=false;intersections=GeometricNet.Util.intersection(intersectedEdges[i].geometry,geom);if(this.debug){console.log("Layer.Edge.js - considerToAdd() - edge_id: "
+intersectedEdges[i].fid+" , no of intersections including at nodes: "
+intersections.length)};for(var j=0;j<intersections.length;j++){nodesFound=this.node.getFeaturesIntersected(intersections[j],this.network.config.tolerance);if(this.debug){console.log("Layer.Edge.js - getIntersectedFromNetwork()- nodesFound on edge: "+nodesFound.length);}
if(nodesFound.length==0){if(this.debug){console.log("Layer.Edge.js - considerToAdd()- no node found so pushing this to intersectionsAtEdge");}
edgeDetail.edge=intersectedEdges[i];edgeDetail.intersections.push(intersections[j]);isEdgeToBeAdded=true;}else{if(this.debug){console.log("Layer.Edge.js - considerToAdd()- node found so pushing this to nodesIntersectedOnEdge");}
nodesIntersectedOnEdge.push(nodesFound[0]);}}
if(isEdgeToBeAdded){result.edges.push(edgeDetail)};}
result.nodes=GeometricNet.Util.removeDuplicate(nodesIntersectedOnEdge);return result;}},createEndNodes:function(edge){var startPoint,endPoint;var startNode,endNode;if(edge.attributes.startNode==undefined){startPoint=edge.geometry.getVertices(true)[0];nodeType=this.network.config.edgeLayer.edges[edge.attributes.edgeType].defaultStartNode;startNode=new GeometricNet.Feature.Vector.Node(startPoint,{nodeType:nodeType},{fid:this.node.createUniqueFid()});startNode.state=OpenLayers.State.INSERT;startNode.layer=this.node;edge.attributes.startNode=startNode.fid;}
if(edge.attributes.endNode==undefined){endPoint=edge.geometry.getVertices(true)[1];nodeType=this.network.config.edgeLayer.edges[edge.attributes.edgeType].defaultEndNode;endNode=new GeometricNet.Feature.Vector.Node(endPoint,{nodeType:nodeType},{fid:this.node.createUniqueFid()});endNode.state=OpenLayers.State.INSERT;endNode.layer=this.node;edge.attributes.endNode=endNode.fid;}
if(this.network.config.isTopology){var endNodes=[startNode,endNode];var nodesWithinTolerance=[];var isNodeSnapped;var nodesToAddNodeLayer=[];nodesWithinTolerance=this.node.getFeaturesIntersected(startNode.geometry);if(nodesWithinTolerance.length>0){if(edge.canSnapToNode(nodesWithinTolerance[0],0)){edge.snapToNode(nodesWithinTolerance[0],0);}else{return false;}}else{startNode.attributes.startEdges.push(edge.fid);nodesToAddNodeLayer.push(startNode);if(this.isOnEdge(startNode)){if(!this.considerNewEdgeSnap(edge,startNode,0))return false;}}
nodesWithinTolerance=this.node.getFeaturesIntersected(endNode.geometry);if(nodesWithinTolerance.length>0){if(edge.canSnapToNode(nodesWithinTolerance[0],1)){edge.snapToNode(nodesWithinTolerance[0],1);}else{return false;}}else{endNode.attributes.endEdges.push(edge.fid);nodesToAddNodeLayer.push(endNode);if(this.isOnEdge(endNode)){if(!this.considerNewEdgeSnap(edge,endNode,1))return false;}}
this.node.addFeatures(nodesToAddNodeLayer);}else{this.node.addFeatures([startNode,endNode]);}
return true;},considerNewEdgeSnap:function(edge,shootingNode,nodeIndex){var intersectedEdges=this.getFeaturesIntersected(shootingNode.geometry);if(this.debug){console.log("Layer.Edge.js - considerSnap() - intersectedEdges: "+intersectedEdges.length);}
if(intersectedEdges.length>0){var edgesSplit=[];var edgesDeleted=[];var shootingNodeStartEdgeCount=0;var shootingNodeEndEdgeCount=0;for(var i=0;i<intersectedEdges.length;i++){var targetEdgeType=intersectedEdges[i].attributes.edgeType;if(edge.attributes.edgeType==targetEdgeType){if(nodeIndex==0){shootingNodeStartEdgeCount=1;}else if(nodeIndex==1){shootingNodeEndEdgeCount=1;}}
if(this.debug){console.log("Layer.Edge.js - considerSnap() - splitting the intersected edge id:"+intersectedEdges[i].fid);}
if(shootingNode.canSnapToEdge(intersectedEdges[i],shootingNodeStartEdgeCount,shootingNodeEndEdgeCount))
{edgesSplit=intersectedEdges[i].splitWith(shootingNode);this.addFeatures(edgesSplit);edgesDeleted.push(intersectedEdges[i]);}else{return false;}}
this.removeFeatures(edgesDeleted);return true;}else{return true;}},isOnEdge:function(node){var intersectedEdges=this.getFeaturesIntersected(node.geometry);if(intersectedEdges.length>0){return true;}else{return false;}},removeEdge:function(edge){if(this.network.config.isTopology){startNode=this.node.getFeatureByFid(edge.attributes.startNode);endNode=this.node.getFeatureByFid(edge.attributes.endNode);OpenLayers.Util.removeItem(startNode.attributes.startEdges,edge.fid);OpenLayers.Util.removeItem(endNode.attributes.endEdges,edge.fid);}
this.removeFeatures([edge]);},CLASS_NAME:"GeometricNet.Layer.Vector.Edge"});GeometricNet.Util.debug=false;GeometricNet.Util.multiSort=function(array,index){for(var i=0;i<array.length;i++){var temp=array[i].splice(index,1);array[i].unshift(temp);}return array.sort();};GeometricNet.Util.removeDuplicate=function(oldArray){var r=new Array();o:for(var i=0,n=oldArray.length;i<n;i++)
{for(var x=0,y=r.length;x<y;x++)
{if(r[x]==oldArray[i])
{continue o;}}
r[r.length]=oldArray[i];}
return r;};GeometricNet.Util.intersection=function(line,geom){var intersections=[];if(geom instanceof OpenLayers.Geometry.LineString){if(line.intersects(geom)){var targetParts,sourceParts;var seg1,seg2;var point;targetParts=line.getVertices();sourceParts=geom.getVertices();for(var i=0;i<targetParts.length-1;i++){seg1={x1:targetParts[i].x,y1:targetParts[i].y,x2:targetParts[i+1].x,y2:targetParts[i+1].y};for(var j=0;j<sourceParts.length-1;j++){seg2={x1:sourceParts[j].x,y1:sourceParts[j].y,x2:sourceParts[j+1].x,y2:sourceParts[j+1].y};point=OpenLayers.Geometry.segmentsIntersect(seg1,seg2,{point:true});if(point){intersections.push(point);}}}}}
return intersections;};GeometricNet.Util.LRSMeasure=function(line,point,options){var details=options&&options.details;var tolerance=options&&options.tolerance?options.tolerance:0.0;if(GeometricNet.Util.debug){console.log("LineString.js - tolerance: "+tolerance);console.log("LineString.js - details: "+details);}
var seg={};var length=0.0;var dist=0.0;var measureCalculated=false;var part1Points=[];var part2Points=[];var totalLength=line.getLength();var result={};if(GeometricNet.Util.debug){console.log("no of segments: "+line.components.length-1)};for(var i=0;i<line.components.length-1;i++){if(GeometricNet.Util.debug){console.log("components : "+i+" : "+line.components[i]);}
seg={x1:line.components[i].x,y1:line.components[i].y,x2:line.components[i+1].x,y2:line.components[i+1].y};dist=OpenLayers.Geometry.distanceToSegment(point,seg).distance;if(GeometricNet.Util.debug){console.log("dist : "+dist);}
if((dist<tolerance)&&!measureCalculated){if(GeometricNet.Util.debug){console.log("finished part 1 , starting part2");}
length+=line.components[i].distanceTo(point);measureCalculated=true;part1Points.push(line.components[i],point);part2Points.push(point,line.components[i+1]);}else if(!measureCalculated){if(GeometricNet.Util.debug){console.log("adding in part 1");}
length+=line.components[i].distanceTo(line.components[i+1]);part1Points.push(line.components[i]);}else{if(GeometricNet.Util.debug){console.log("adding in part 2");}
part2Points.push(line.components[i+1]);}}
if(GeometricNet.Util.debug){console.log("part2Points length :"+part2Points.length);console.log("part2Points[0]:"+part2Points[0].toString());}
if(details){result={measure:length/totalLength,subString1:new OpenLayers.Geometry.LineString(part1Points),subString2:new OpenLayers.Geometry.LineString(part2Points)};if(GeometricNet.Util.debug){console.log("LineString - result.subString1:"+result.subString1.toString());console.log("LineString - result.subString2:"+result.subString2.toString());}
return result;}else{return length/totalLength;}};Array.prototype.isKey=function(){for(i in this){if(this[i]===arguments[0])
return true;};return false;};GeometricNet.Util.createFormat=function(format){if(format.toLowerCase()=="geojson"){return new OpenLayers.Format.GeoJSON();}else if(format.toLowerCase=="gml"){return new OpenLayers.Format.GML();}else{return null;}};GeometricNet.Util.createProtocol=function(protocol,url,format,params){if(protocol.toLowerCase()=="http"){return new OpenLayers.Protocol.HTTP({url:url,format:format,params:params});}else{return null;}};GeometricNet.Util.createStrategy=function(strategy){if(strategy.toLowerCase()=="fixed"){return new OpenLayers.Strategy.Fixed();}else if(strategy.toLowerCase=="bbox"){return new OpenLayers.Strategy.BBOX();}else{return null;}};GeometricNet.Util.getStrategyByClassName=function(layer,className){if(layer.strategies&&layer.strategies.length>0){for(var i=0;i<layer.strategies.length;i++){if(layer.strategies[i].CLASS_NAME==className){return layer.strategies[i];}}}
return null;};GeometricNet.Graph=OpenLayers.Class({node:null,edge:null,debug:false,initialize:function(edge,node,options){this.edge=edge;this.node=node;},resetScore:function(){for(var i=0;i<this.node.features.length;i++){this.node.features[i].f=0;this.node.features[i].g=0;this.node.features[i].h=0;this.node.features[i].debug="";this.node.features[i].parent=null;}},aStarSearch:function(start,end){this.resetScore();var openList=[];var closedList=[];openList.push(start);var counter=0;while(openList.length>0&&counter<1000){counter+=1;if(this.debug){console.log("counter: "+counter);}
var lowInd=0;for(var i=0;i<openList.length;i++){if(openList[i].f<openList[lowInd].f){lowInd=i;}}
var currentNode=openList[lowInd];if(currentNode==end){var curr=currentNode;var ret=[];while(curr.parent){ret.push(curr);curr=curr.parent;}
ret.push(curr);return ret.reverse();}
OpenLayers.Util.removeItem(openList,currentNode);closedList.push(currentNode);var neighbors=this.getNeighbors(currentNode);for(var i=0;i<neighbors.length;i++){var neighbor=neighbors[i];if(closedList.isKey(neighbor)){continue;}
var gScore=currentNode.g+this.getCost(currentNode,neighbor);var gScoreIsBest=false;if(!openList.isKey(neighbor)){gScoreIsBest=true;neighbor.h=this.calculateHeuristic(neighbor,end);openList.push(neighbor);}
else if(gScore<neighbor.g){gScoreIsBest=true;}
if(gScoreIsBest){neighbor.parent=currentNode;neighbor.g=gScore;neighbor.f=neighbor.g+neighbor.h;neighbor.debug="F: "+neighbor.f+"<br />G: "+neighbor.g+"<br />H: "+neighbor.h;}}}
return[];},getNeighbors:function(node){var neighbors=[];var edge,neighbor;for(var i=0;i<node.attributes.startEdges.length;i++){edge=this.edge.getFeatureByFid(node.attributes.startEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.endNode);neighbors.push(neighbor);}}
for(var i=0;i<node.attributes.endEdges.length;i++){edge=this.edge.getFeatureByFid(node.attributes.endEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.startNode);neighbors.push(neighbor);}}
return neighbors;},calculateHeuristic:function(fromNode,toNode){var deltaX=fromNode.geometry.x-toNode.geometry.x;var deltaY=fromNode.geometry.y-toNode.geometry.y;return Math.sqrt(deltaX*deltaX+deltaY*deltaY);},getCost:function(fromNode,toNode){for(var i=0;i<fromNode.attributes.startEdges.length;i++){edge=this.edge.getFeatureByFid(fromNode.attributes.startEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.endNode);if(neighbor==toNode){return edge.geometry.getLength();}}}
for(var i=0;i<fromNode.attributes.endEdges.length;i++){edge=this.edge.getFeatureByFid(fromNode.attributes.endEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.startNode);if(neighbor==toNode){return edge.geometry.getLength();}}}
return-1;},getEdge:function(fromNode,toNode){for(var i=0;i<fromNode.attributes.startEdges.length;i++){edge=this.edge.getFeatureByFid(fromNode.attributes.startEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.endNode);if(neighbor==toNode){return edge;}}}
for(var i=0;i<fromNode.attributes.endEdges.length;i++){edge=this.edge.getFeatureByFid(fromNode.attributes.endEdges[i]);if(edge){neighbor=this.node.getFeatureByFid(edge.attributes.startNode);if(neighbor==toNode){return edge;}}}
return false;},getPathEdges:function(nodes){var edges=[];for(var i=0;i<nodes.length-1;i++){edges.push(this.getEdge(nodes[i],nodes[i+1]));}
return edges;},CLASS_NAME:"GeometricNet.Graph"});GeometricNet.Layer.Vector.Flag=OpenLayers.Class(OpenLayers.Layer.Vector,{graph:null,debug:false,initialize:function(name,graph,options){this.graph=graph;if(options==undefined){options={};}
var symbolizer,styleMap;if(options.styleMap==undefined){options.styleMap=new OpenLayers.StyleMap({pointRadius:10,fillColor:"red",fillOpacity:0.7,strokeColor:"black"});}
var newArguments=[];newArguments.push(name,options);OpenLayers.Layer.Vector.prototype.initialize.apply(this,newArguments);this.events.on({"sketchcomplete":this.onSketchComplete,"featureadded":this.onFeatureAdded,"scope":this});},onSketchComplete:function(event){var node=this.graph.node.findNearestNode(event.feature.geometry,200);if(node){event.feature.geometry=node.geometry;return true;}else{return false;}},onFeatureAdded:function(event){var count=this.features.length;var startNode,endNode;if(count>1){startNode=this.graph.node.findNearestNode(this.features[count-2].geometry,100);endNode=this.graph.node.findNearestNode(this.features[count-1].geometry,100);selectCtrl=new OpenLayers.Control.SelectFeature(this.graph.edge);path_nodes=this.graph.aStarSearch(startNode,endNode);path_edges=this.graph.getPathEdges(path_nodes);selectCtrl.unselectAll();for(var i=0;i<path_edges.length;i++){selectCtrl.select(path_edges[i]);}
if(count>2){this.removeFeatures(this.features[0]);}}},CLASS_NAME:"GeometricNet.Layer.Vector.Flag"});GeometricNet.Network=OpenLayers.Class({name:null,map:null,config:{},edge:null,node:null,uidPrefix:"",initialize:function(name,map,config){if(name==undefined&&map==undefined&&config==undefined){return null;}
this.name=config.name;if(map instanceof OpenLayers.Map){this.map=map;}else{return null;}
this.config=config;this.node=this.createNodeLayer(this.config);this.node.network=this;map.addLayer(this.node);this.edge=this.createEdgeLayer(this.node,this.config);this.edge.network=this;map.addLayer(this.edge);this.getUidPrefix();},createNodeLayer:function(networkConfig){var options={};var defaultLookup={};var symbolCount=0;for(node in networkConfig.nodeLayer.nodes){if(networkConfig.nodeLayer.nodes[node].symbols){defaultLookup[node]=networkConfig.nodeLayer.nodes[node].symbols.defaultStyle;symbolCount++;}}
if(symbolCount>0){var styleMap=new OpenLayers.StyleMap();styleMap.addUniqueValueRules("default",networkConfig.nodeLayer.typeAttributeName,defaultLookup);options.styleMap=styleMap;}
options.projection=networkConfig.projection;if(networkConfig.nodeLayer.dataSource.strategies){var strategies=[];for(var i=0;i<networkConfig.nodeLayer.dataSource.strategies.length;i++){strategies.push(GeometricNet.Util.createStrategy(networkConfig.nodeLayer.dataSource.strategies[i]));}
options.strategies=strategies;if(networkConfig.isEditable==true){options.strategies.push(new OpenLayers.Strategy.Save());}}
if(networkConfig.nodeLayer.dataSource.protocol){var format=GeometricNet.Util.createFormat(networkConfig.nodeLayer.dataSource.format);var params={};var protocol=GeometricNet.Util.createProtocol(networkConfig.nodeLayer.dataSource.protocol,networkConfig.nodeLayer.dataSource.url,format,params);options.protocol=protocol;}
options.network=this;var nodeLayer=new GeometricNet.Layer.Vector.Node(this.name+"_node",options);return nodeLayer;},createEdgeLayer:function(node,networkConfig){var options={};var defaultLookup={};var symbolCount=0;for(edge in networkConfig.edgeLayer.edges){if(networkConfig.edgeLayer.edges[edge].symbols){defaultLookup[edge]=networkConfig.edgeLayer.edges[edge].symbols.defaultStyle;symbolCount++;}}
if(symbolCount>0){var styleMap=new OpenLayers.StyleMap();styleMap.addUniqueValueRules("default",networkConfig.edgeLayer.typeAttributeName,defaultLookup);options.styleMap=styleMap;}
options.projection=networkConfig.projection;if(networkConfig.edgeLayer.dataSource.strategies){var strategies=[];for(var i=0;i<networkConfig.edgeLayer.dataSource.strategies.length;i++){strategies.push(GeometricNet.Util.createStrategy(networkConfig.edgeLayer.dataSource.strategies[i]));}
options.strategies=strategies;if(networkConfig.isEditable==true){options.strategies.push(new OpenLayers.Strategy.Save());}}
if(networkConfig.edgeLayer.dataSource.protocol){var format=GeometricNet.Util.createFormat(networkConfig.edgeLayer.dataSource.format);var params={};var protocol=GeometricNet.Util.createProtocol(networkConfig.edgeLayer.dataSource.protocol,networkConfig.edgeLayer.dataSource.url,format,params);options.protocol=protocol;}
options.network=this;var edgeLayer=new GeometricNet.Layer.Vector.Edge(this.name+"_edge",node,options);return edgeLayer;},createNodeControls:function(){var controls=[];for(node in this.config.nodeLayer.nodes){var isEditable=true;if(this.config.nodeLayer.nodes[node].isEditable!=undefined){isEditable=this.config.nodeLayer.nodes[node].isEditable;}
if(isEditable&&this.config.nodeLayer.nodes[node].controlOptions){this.config.nodeLayer.nodes[node].controlOptions.nodeType=node;controls.push(new GeometricNet.Control.DrawFeature.DrawNode(this.node,OpenLayers.Handler.Point,this.config.nodeLayer.nodes[node].controlOptions));}}
return controls;},createEdgeControls:function(){var controls=[];for(edge in this.config.edgeLayer.edges){var isEditable=this.config.edgeLayer.edges[edge].isEditable?this.config.edgeLayer.edges[edge].isEditable:true;if(isEditable&&this.config.edgeLayer.edges[edge].controlOptions){this.config.edgeLayer.edges[edge].controlOptions.edgeType=edge;controls.push(new GeometricNet.Control.DrawFeature.DrawEdge(this.edge,OpenLayers.Handler.Path,this.config.edgeLayer.edges[edge].controlOptions));}}
return controls;},createEditPanel:function(isSnapping){var panel=new OpenLayers.Control.Panel();panel.name=this.name+"_editPanel";var controls=[];controls=controls.concat(this.createEdgeControls());controls=controls.concat(this.createNodeControls());if(this.config.saveControlOptions){var saveControlOptions=this.config.saveControlOptions;saveControlOptions.trigger=this.save;var saveControl=new OpenLayers.Control.Button(saveControlOptions);saveControl.network=this;controls.push(saveControl);}
controls.push(this.createModifyControl());panel.addControls(controls);if(isSnapping){var edgeToNodeSnap=new OpenLayers.Control.Snapping({layer:this.edge,targets:[{layer:this.node}]});this.map.addControl(edgeToNodeSnap);edgeToNodeSnap.activate();var nodeToEdgeSnap=new OpenLayers.Control.Snapping({layer:this.node,targets:[{layer:this.edge}]});this.map.addControl(nodeToEdgeSnap);nodeToEdgeSnap.activate();var edgeToEdgeSnap=new OpenLayers.Control.Snapping({layer:this.edge});this.map.addControl(edgeToEdgeSnap);edgeToEdgeSnap.activate();var nodeToNodeSnap=new OpenLayers.Control.Snapping({layer:this.node});this.map.addControl(nodeToNodeSnap);nodeToNodeSnap.activate();}
return panel;},createModifyControl:function(){var control=new OpenLayers.Control.ModifyFeature(this.node,{title:"Move Node",displayClass:"olControlModifyFeature",mode:OpenLayers.Control.ModifyFeature.DRAG});return control;},getUidPrefix:function(options){params={"request":"getuidprefix","network":this.name};if(this.config.networkUrl){resp=OpenLayers.Request.GET({url:this.config.networkUrl,callback:this.parseUidPrefix.bind(this),params:params,});}
return null;},parseUidPrefix:function(){if(resp.status>=200||resp.status<=300){this.uidPrefix=resp.responseText;}},save:function(){var saveNode=GeometricNet.Util.getStrategyByClassName(this.network.node,"OpenLayers.Strategy.Save");saveNode.save();var saveEdge=GeometricNet.Util.getStrategyByClassName(this.network.edge,"OpenLayers.Strategy.Save");saveEdge.save();alert("Saving modified or new network features to server.");},CLASS_NAME:"GeometricNet.Network"});