<!-- Checks whether the user is logged in: if not redirects to index.zul   -->
<?init class="com.navis.framework.zk.security.ZCheckLogin" ?>
<?page id="pageTableView" cacheable="false" language="xul/html" zscriptLanguage="Java" contentType="text/html;charset=UTF-8"?>

<!-- This allows us to use Spring beans. -->
<?variable-resolver class="com.navis.framework.zk.server.ZDelegatingVariableResolver"?>
<zk>
    <zscript><![CDATA[
        import com.navis.framework.zk.server.context.ZkRequestContextFactory;
        import com.navis.framework.presentation.util.PresentationConstants;
        import com.navis.framework.zk.ZFrmConsts;

        Object apply = arg.get(PresentationConstants.CONTROLLER);

        Object hflex = arg.get(ZFrmConsts.HFLEX);
        if (hflex == null) {
            hflex = "false";
        }
        Object vflex = arg.get(ZFrmConsts.VFLEX);
        if (vflex == null) {
            vflex = "false";
        }

    ]]></zscript>
    <!-- The window can't have a static id because multiple tables can exist in the same name sapce. We programatically set the id. -->
    <window apply="${apply}" closable="true" maximizable="false" border="none" vflex="${vflex}" hflex="${hflex}">
        <zscript><![CDATA[
            import java.util.List;
            import java.util.Map;
            import java.util.HashMap;
            import java.lang.Object;
            import java.lang.String;
            import java.io.Serializable;
            import com.navis.framework.zk.ZFrmConsts;
            import com.navis.framework.presentation.variforms.xml.XmlVariformConsts;
            import com.navis.framework.presentation.util.PresentationConstants;
            import com.navis.framework.portal.AttributeUtils;
            import com.navis.framework.presentation.command.IBaseCommand;
            import com.navis.framework.presentation.command.VariformUiCommand;
            import com.navis.framework.presentation.context.RecapContext;

            IBaseCommand crudCommand = arg.get(PresentationConstants.CRUD_COMMAND);
            IBaseCommand doubleClickCommand = arg.get(PresentationConstants.DOUBLE_CLICK_COMMAND);
            Object use = arg.get(PresentationConstants.VIEW);
            Object tableModel = arg.get(PresentationConstants.UI_MANAGER);
            Map contextMenu = arg.get(VariformUiCommand.CONTEXT_MENU);
            Map actionsMenu = arg.get(VariformUiCommand.ACTIONS_MENU);
            Map displayMenu = arg.get(VariformUiCommand.DISPLAY_MENU);
            List variformIds = arg.get(PresentationConstants.VARIFORM_ID);
            RecapContext recapContext = (RecapContext) arg.get(RecapContext.RECAP_CONTEXT);
            String defaultRecapXAttribute = arg.get(XmlVariformConsts.DEFAULT_RECAP_X_ATTRIBUTE); // set from variform definition
            String defaultRecapYAttribute = arg.get(XmlVariformConsts.DEFAULT_RECAP_Y_ATTRIBUTE); // set from variform definition
            Menupopup sharedContextMenu = arg.get(ZFrmConsts.SHARED_CONTEXT_MENU); // set from variform definition
            String variformId = variformIds.get(0);

            List commands = arg.get("commands");
            String tableHeight = arg.get("height");
            String multiple = arg.get("multiple");
            if (multiple == null){
                multiple = "true";
            }
            String checkmark = arg.get("checkmark");
            String fixedLayout = arg.get("fixedLayout");
            Boolean headerRemovedBool = AttributeUtils.getAttributeAsBooleanOrDefault(arg.get(PresentationConstants.TABLE_HEADER_REMOVED),false);
            String headerRemoved = headerRemovedBool.toString();
            Boolean contextMenuRemovedBool = AttributeUtils.getAttributeAsBooleanOrDefault(arg.get(PresentationConstants.TABLE_CONTEXT_MENU_REMOVED),
                false);
            String contextMenuRemoved = contextMenuRemovedBool.toString();
            if ("true".equals(contextMenuRemoved)){
                contextMenu = null;
            }

            String tableMetafield = (String) arg.get(PresentationConstants.MASTER_REF_FIELD_ID);
            Serializable tableRowGkey = (Serializable) arg.get(PresentationConstants.MASTER_REF_FIELD_VALUE);
            Object tableRowRenderer = arg.get(ZFrmConsts.TABLE_ROW_RENDERER);
            String finderQueryApi = (String) arg.get(PresentationConstants.FINDER_QUERY_API);
        ]]></zscript>
        <zTable variformId="${variformId}" use="${use}" tableHeight="${tableHeight}" multiple="${multiple}"
                checkmark="${checkmark}"
                headerRemoved="${headerRemoved}" fixedLayout="${fixedLayout}" sharedUiManager="${tableModel}" tableController="${apply}"
                tableRowRenderer="${tableRowRenderer}" contextMenu="${contextMenu}" actionsMenu="${actionsMenu}" displayMenu="${displayMenu}"
                forward="onSelect=onSelect,onDragSelect=onDragSelect">
            <custom-attributes doubleClickCommand="${doubleClickCommand}"/>
            <custom-attributes crudCommand="${crudCommand}"/>
            <custom-attributes masterRefFieldId="${tableMetafield}"/>
            <custom-attributes masterRefFieldValue="${tableRowGkey}"/>
            <custom-attributes finderQueryApi="${finderQueryApi}"/>
            <custom-attributes recapContext="${recapContext}"/>
            <custom-attributes defaultRecapXAttribute="${defaultRecapXAttribute}"/>
            <custom-attributes defaultRecapYAttribute="${defaultRecapYAttribute}"/>
            <custom-attributes sharedContextMenu="${sharedContextMenu}"/>
        </zTable>
        <!--Context menu which appears when user right clicks on an item. Populated in DefaultTableController-->
        <window id="contextMenuWindow">
            <menupopup id="contextMenu"/>
        </window>
    </window>
</zk>
